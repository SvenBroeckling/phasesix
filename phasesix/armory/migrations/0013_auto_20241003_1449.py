# Generated by Django 5.1.1 on 2024-10-03 14:49

from django.db import migrations


def create_modification_keywords(apps, schema_editor):
    WeaponModification = apps.get_model("armory", "WeaponModification")
    Keyword = apps.get_model("armory", "Keyword")

    for weapon_modification in WeaponModification.objects.all():
        for wmac in weapon_modification.weaponmodificationattributechange_set.all():
            if wmac.attribute and wmac.attribute_modifier:
                keyword = Keyword.objects.get(identifier=wmac.attribute)
                weapon_modification.weaponmodificationkeyword_set.create(
                    keyword=keyword, value=wmac.attribute_modifier
                )
            if wmac.status_effect and wmac.status_effect_value:
                keyword, _ = Keyword.objects.get_or_create(
                    identifier=wmac.status_effect,
                    defaults={
                        "name_de": wmac.status_effect.name_de,
                        "name_en": wmac.status_effect.name_en,
                        "description_de": wmac.status_effect.rules_de,
                        "description_en": wmac.status_effect.rules_en,
                        "ordering": 200,
                        "is_rare": True,
                        "show_in_dice_rolls": True,
                    },
                )
                weapon_modification.weaponmodificationkeyword_set.create(
                    keyword=keyword, value=wmac.status_effect_value
                )


def create_keywords(apps, schema_editor):
    Weapon = apps.get_model("armory", "Weapon")
    Keyword = apps.get_model("armory", "Keyword")

    damage_potential = Keyword.objects.create(
        identifier="damage_potential",
        name_de="Schadenspotential",
        name_en="Damage Potential",
        description_de="Dem Trefferwurf werden {X} Würfel hinzugefügt",
        description_en="Add {X} dice to the hit roll",
        ordering=1000,
    )
    piercing = Keyword.objects.create(
        identifier="piercing",
        name_de="Durchschlag",
        name_en="Piercing",
        description_de="Die Rüstung des Angegriffenen wird vor dem Trefferwurf um {X} verringert",
        description_en="The target's protection is reduced by {X} before the hit roll",
        ordering=998,
        show_in_dice_rolls=True,
    )
    capacity = Keyword.objects.create(
        identifier="capacity",
        name_de="Kapaziät",
        name_en="Capacity",
        description_de="Die Waffe kann {X} mal schießen, bevor nachgeladen werden muss.",
        description_en="The weapon can fire {X} times before it needs to be reloaded.",
        ordering=980,
    )
    concealment = Keyword.objects.create(
        identifier="concealment",
        name_de="Verborgenheit",
        name_en="Concealment",
        description_de="Beschreibt die Verborgenheit der Waffe",
        description_en="Describes how easy the weapon is to conceal",
        ordering=900,
    )
    actions_to_ready = Keyword.objects.create(
        identifier="actions_to_ready",
        name_de="Vorbereitung",
        name_en="Preparation",
        description_de="Die Waffe benötigt {X} Aktionen, um sie bereit zu machen",
        description_en="The weapon requires {X} actions to ready it",
        ordering=800,
    )
    range_meter = Keyword.objects.create(
        identifier="range_meter",
        name_de="Reichweite",
        name_en="Range",
        description_de="Die Waffe kann auf {X} Meter eingesetzt werden",
        description_en="The weapon can be used at a range of {X} meters",
        ordering=700,
    )
    recoil_compensation = Keyword.objects.create(
        identifier="recoil_compensation",
        name_de="Rückstosskontrolle",
        name_en="Recoil Compensation",
        description_de="Der Rückstossmalus ist um {X} verringert",
        description_en="The recoil penalty is reduced by {X}",
        ordering=700,
        show_in_dice_rolls=True,
    )
    crit_minimum_roll = Keyword.objects.create(
        identifier="crit_minimum_roll",
        name_de="Kritische Treffer",
        name_en="Critical Hits",
        description_de="Der notwendige Wurf für einen kritischen Treffer ist {X}",
        description_en="The roll required for a critical hit is {X}",
        ordering=701,
        show_in_dice_rolls=True,
    )
    reload_actions = Keyword.objects.create(
        identifier="reload_actions",
        name_de="Nachladen",
        name_en="Reload",
        description_de="Das Nachladen der Waffe dauert {X} Aktionen",
        description_en="Reloading the weapon takes {X} actions",
        ordering=990,
    )

    for w in Weapon.objects.all():
        if w.piercing > 0:
            w.weaponkeyword_set.create(keyword=piercing, value=w.piercing)
        if w.range_meter > 1:
            w.weaponkeyword_set.create(keyword=range_meter, value=w.range_meter)
        if w.recoil_compensation > 0:
            w.weaponkeyword_set.create(
                keyword=recoil_compensation, value=w.recoil_compensation
            )
        if w.concealment > 0:
            w.weaponkeyword_set.create(keyword=concealment, value=w.concealment)
        if w.actions_to_ready != 1:
            w.weaponkeyword_set.create(
                keyword=actions_to_ready, value=w.actions_to_ready
            )
        if w.crit_minimum_roll != 11:
            w.weaponkeyword_set.create(
                keyword=crit_minimum_roll, value=w.crit_minimum_roll
            )
        if w.capacity and w.capacity > 0:
            w.weaponkeyword_set.create(keyword=capacity, value=w.capacity)
        if w.reload_actions != 1:
            w.weaponkeyword_set.create(keyword=reload_actions, value=w.reload_actions)
        if w.damage_potential != 0:
            w.weaponkeyword_set.create(
                keyword=damage_potential, value=w.damage_potential
            )


class Migration(migrations.Migration):

    dependencies = [
        ("armory", "0012_keyword_show_in_dice_rolls"),
    ]

    operations = [
        migrations.RunPython(create_keywords),
        migrations.RunPython(create_modification_keywords),
    ]
