# Generated by Django 5.0.3 on 2024-03-15 22:01

from django.db import migrations


def forward(apps, schema_editor):
    Weapon = apps.get_model("armory", "Weapon")
    WeaponKeyword = apps.get_model("armory", "WeaponKeyword")
    Keyword = apps.get_model("armory", "Keyword")

    piercing = Keyword.objects.create(
        name_de="Durchschlag",
        name_en="Piercing",
        description_de="Die Rüstung des Angegriffenen wird vor dem Trefferwurf um {X} verringert",
        description_en="The target's protection is reduced by {X} before the hit roll",
    )
    recoil_compensation = Keyword.objects.create(
        name_de="Rückstosskontrolle",
        name_en="Recoil Compensation",
        description_de="Der Rückstossmalus ist um {X} verringert",
        description_en="The recoil penalty is reduced by {X}",
    )
    actions_to_ready = Keyword.objects.create(
        name_de="Vorbereitung",
        name_en="Preparation",
        description_de="Die Waffe benötigt {X} Aktionen, um sie bereit zu machen",
        description_en="The weapon requires {X} actions to ready it",
    )
    crit_minimum_roll = Keyword.objects.create(
        name_de="Kritische Treffer",
        name_en="Critical Hits",
        description_de="Der notwendige Wurf für einen kritischen Treffer ist {X}",
        description_en="The roll required for a critical hit is {X}",
    )
    reload_actions = Keyword.objects.create(
        name_de="Nachladen",
        name_en="Reload",
        description_de="Das Nachladen der Waffe dauert {X} Aktionen",
        description_en="Reloading the weapon takes {X} actions",
    )
    capacity = Keyword.objects.create(
        name_de="Magazin",
        name_en="Capacity",
        description_de="Die Waffe hat {X} Schuss im Magazin. Wenn diese verbraucht sind, muss nachgeladen werden",
        description_en="The weapon has {X} rounds in the magazine. When these are used up, it must be reloaded",
    )
    damage_potential = Keyword.objects.create(
        name_de="Schadenspotential",
        name_en="Damage Potential",
        description_de="Dem Trefferwurf werden {X} Würfel hinzugefügt",
        description_en="Add {X} dice to the hit roll",
    )

    for w in Weapon.objects.all():
        if w.piercing > 0:
            w.weaponkeyword_set.create(keyword=piercing, value=w.piercing)
        if w.recoil_compensation > 0:
            w.weaponkeyword_set.create(
                keyword=recoil_compensation, value=w.recoil_compensation
            )
        if w.actions_to_ready != 1:
            w.weaponkeyword_set.create(
                keyword=actions_to_ready, value=w.actions_to_ready
            )
        if w.crit_minimum_roll != 11:
            w.weaponkeyword_set.create(
                keyword=crit_minimum_roll, value=w.crit_minimum_roll
            )
        if w.capacity and w.capacity > 0:
            w.weaponkeyword_set.create(keyword=capacity, value=w.capacity)
        if w.reload_actions != 1:
            w.weaponkeyword_set.create(keyword=reload_actions, value=w.reload_actions)
        if w.damage_potential != 0:
            w.weaponkeyword_set.create(
                keyword=damage_potential, value=w.damage_potential
            )


class Migration(migrations.Migration):

    dependencies = [
        ("armory", "0006_keyword_weaponkeyword"),
    ]

    operations = [migrations.RunPython(forward)]
